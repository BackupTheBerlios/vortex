#!/static/bin/sh
# $Id: sysinit,v 1.2 2005/09/16 06:48:11 softcraft Exp $
###
##
# /static/sysinit -- initial ramdisk (initrd) startup script
#
# 2005-05-05 Generations Linux <info@softcraft.org>
##
###

umask 022

# $STAGE is the mount point for the Generations Linux ISO image
STAGE=/mnt/linux

# Don't allow interrupt signals
trap "" 1 2 3 15

# We only need the builtin commands and $STATIC/sbin:$STATIC/bin at this point
STATIC=/static
PATH=$STATIC/sbin:$STATIC/bin
export STATIC PATH

##
# Usage: mountit src dst "options"
# Builin filesystems
mountit(){
  BUILTIN_FS="iso9660 ext2 vfat"
  for fs in $BUILTIN_FS; do
    test -b $1 && mount -t $fs $3 $1 $2 >/dev/null 2>&1 && return 0
  done
  return 1
}

# Reset fb color mode + Erase to EOL + Clear
RESET="]R"
CRE="[K"
CLEAR="c"

# ANSI COLORS
NORMAL="[0;39m"
WHITE="[1;37m"
RED="[1;31m"
GREEN="[1;32m"
BLUE="[1;34m"
YELLOW="[1;33m"
MAGENTA="[1;35m"
CYAN="[1;36m"

# Display welcome screen
cat $STATIC/welcome.scr

# Mount /proc and /dev/pts
mount -t proc proc /proc

if grep -q sysfs /proc/filesystems; then
  [ -d /sys ] || mkdir /sys
  mount -t sysfs sysfs /sys
fi
mount -t devpts none /dev/pts

# Read boot command line with builtin cat command
CMDLINE="$(cat /proc/cmdline)"

runlevel=4
mode="sysvinit"

for opt in $CMDLINE; do
  case $opt in
    0|1|2|3|4|5|6)
      runlevel=$opt
      ;;
    expert)
      mode="expert"
      ;;
    install)
      mode="install"
      ;;
    shell)
      mode="shell"
      ;;
  esac
done

# Disable kernel messages while probing modules in autodetect mode
echo "0" > /proc/sys/kernel/printk

# Load essential modules 
insmod $STATIC/modules/loop.ko
insmod $STATIC/modules/squashfs.ko
insmod $STATIC/modules/unionfs.ko

insmod $STATIC/modules/scsi_mod.ko
insmod $STATIC/modules/ide-scsi.ko
insmod $STATIC/modules/sr_mod.ko

# Also check HD partitions for a generations/linux image
DEVICES="/dev/scd? /dev/hd? /dev/hd?[1-9] /dev/hd?[1-9][0-9]"
for device in $DEVICES
do
  echo -n "${CRE}${BLUE}Searching for media in: ${WHITE}$i${NORMAL}..."
  if mountit $device /mnt/media "-o ro" >/dev/null 2>&1; then
    if test -d /mnt/media/generations; then
      echo -n "${CRE}Accessing generations linux media on ${WHITE}$device${NORMAL}"
      generations="/mnt/media/generations"
      break
    fi
    umount /mnt/media
  fi
done

# Mount the compressed Linux image as squashfs
if test -n "$generations" -a -f $generations/linux; then
  mount -rt squashfs -o loop $generations/linux $STAGE

  if test -d $STAGE/etc; then
    # Enable kernel messages and SCSI log
    # ( echo "scsi log <token> <n>" >/proc/scsi/scsi
    #   where <token> {all, none, error, timeout, scan, mlqueue, mlcomplete,
    #                  llqueue, llcomplete, hlqueue, hlcomplete, ioctl}
    #     and <n> a number between 0 and 7
    # )
    echo "6" > /proc/sys/kernel/printk
    echo "scsi log all 2" > /proc/scsi/scsi
    echo ""

    # Set paths, we should have all essential commands available.
    echo -n "${CRE}${BLUE}Setting up operating environment...${NORMAL}"

    $STATIC/bin/rm -f /lib ; $STATIC/bin/ln -s $STAGE/lib /lib
    PATH="$STAGE/sbin:$STAGE/bin:$STAGE/usr/sbin:$STAGE/usr/bin:."
    hash -r

    # Create and make available system directories in memory
    MEMORY="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
    RAMSIZE="$(expr $MEMORY \* 5 / 7)k"

    mount -t tmpfs -o size=$RAMSIZE /dev/shm /stand
    mount -t unionfs -o dirs=/stand:$STAGE none /vortex

    # All PATHs should now resolve to the mounted /vortex 
    $STATIC/bin/rm -f /lib ; $STATIC/bin/ln -s /vortex/lib /lib
    PATH="/sbin:/bin:/usr/sbin:/usr/bin:."

    # Rehash program path and set host name
    hash -r
    hostname linux

    # Ready to give control to the init process (or shell.)
    cat /vortex/etc/ld.so.cache > /etc/ld.so.cache
    syslogd -m 0 && klogd -x

    if [ "$mode" = "expert" -o "$mode" = "install" -o "$mode" = "shell" ]; then
      echo "${CRE}Dropping you to a command shell in ${WHITE}$mode${NORMAL} mode."
      command="$STATIC/bin/sh"
    else
      echo "${CRE}Starting init process."
      command="$STATIC/sbin/init $runlevel"
    fi
  else
    message="${CRE}${RED}Sorry, cannot find a vortex system.${NORMAL}"
  fi
else
  message="${CRE}${RED}Sorry, cannot find a generations/linux.${NORMAL}"
fi

##
# Completed checks.. enable kernel messages and allow signals
echo "6" > /proc/sys/kernel/printk
trap 1 2 3 15

##
# Detect presence of error $message
if test -n "$message"; then
  echo "$message"
  echo "${RED}Dropping you to a shell in a limited environment.${NORMAL}"
  echo "${RED}Press reset button to quit.${NORMAL}"
  echo ""
  command="$STATIC/bin/sh"
  PS1="linux# "
  export PS1
fi
exec $command

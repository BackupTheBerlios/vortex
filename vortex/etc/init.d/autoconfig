#!/bin/sh
# $Id: autoconfig,v 1.1 2005/08/29 01:21:07 softcraft Exp $
###
##
# /etc/init.d/autoconfig - basic system configuration and hardware setup
#
# 2003-09-17 Klaus Knopper <knopper@knopper.net>
# 2005-06-10 Generations Linux <info@softcraft.org>
##
###
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/bin/X11"
export PATH

umask 022
RUNLEVEL="$(runlevel)"

MEMORY="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
MEMORY="$(expr $MEMORY / 1000)"

SYSERVICES=/etc/sysconfig/services
XSYSCONFIG=/etc/sysconfig/xserver

# Ignore these signals: INT, TERM, SEGV
trap "" 2 3 11

# ANSI COLORS
CRE="[K"
NORMAL="[0;39m"
WHITE="[1;37m"
RED="[1;31m"
GREEN="[1;32m"
BLUE="[1;34m"
YELLOW="[1;33m"
MAGENTA="[1;35m"
CYAN="[1;36m"


### Utility Function(s)

# Simple shell grep
stringinfile(){
  case "$(cat $2)" in *$1*) return 0;; esac
  return 1
}

# same for strings
stringinstring(){
  case "$2" in *$1*) return 0;; esac
  return 1
}

# Reread boot command line; echo last parameter's argument or return false.
getbootparam(){
  stringinstring " $1=" "$CMDLINE" || return 1
  result="${CMDLINE##*$1=}"
  result="${result%%[ 	]*}"
  echo "$result"
  return 0
}

# Check boot commandline for specified option
checkbootparam(){
  stringinstring " $1" "$CMDLINE"
  return "$?"
}
###<eof> utility functions

# We need /proc here, so mount it in case we skipped the bootfloppy
[ -f /proc/version ] || mount -t proc proc /proc 2>/dev/null

# Read in boot parameters
CMDLINE="$(cat /proc/cmdline)"

### localization
# Allow language specification via commandline. The default language
# will be overridden via "lang=de" boot commandline
LANGUAGE="$(getbootparam lang 2>/dev/null)"
[ -n "$LANGUAGE" ] || LANGUAGE="us"

# The default language/keyboard to use. This CANNOT be autoprobed.
# Most of these variables will be used to generate the KDE defaults
# and will be inserted into /etc/sysconfig/* below.
case "$LANGUAGE" in
de)
# German version
COUNTRY="de"
LANG="de_DE@euro"
KEYTABLE="de-latin1-nodeadkeys"
XKEYBOARD="de"
KDEKEYBOARD="de"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="us,fr"
;;
# BE version
be)
LANGUAGE="be"
COUNTRY="be"
LANG="be"
KEYTABLE="be-latin1"
XKEYBOARD="be"
KDEKEYBOARD="be"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
# BG version
bg)
LANGUAGE="bg"
COUNTRY="bg"
LANG="bg_BG"
KEYTABLE="bg"
XKEYBOARD="bg"
KDEKEYBOARD="bg"
CHARSET="microsoft-cp1251"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
# Swiss version (basically de with some modifications)
ch)
LANGUAGE="de"
COUNTRY="ch"
LANG="de_CH"
KEYTABLE="sg-latin1"
XKEYBOARD="de_CH"
KDEKEYBOARD="de_CH"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="de,us,fr"
;;
cn)
# Simplified Chinese version
COUNTRY="cn"
LANG="zh_CN.GB2312"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="us"
CHARSET="gb2312.1980-0"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
XMODIFIERS="@im=Chinput"
;;
# Czech version
cs|cz)
LANGUAGE="cs"
COUNTRY="cs"
LANG="cs_CZ"
KEYTABLE="cz-lat2"
XKEYBOARD="cs"
KDEKEYBOARD="cs"
CHARSET="iso8859-2"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
dk|da)
# Dansk version
COUNTRY="dk"
LANG="da_DK"
# Workaround: "dk" broken in gettext, use da:da_DK
LANGUAGE="da:da_DK"
# Keytable "dk" is correct.
KEYTABLE="dk"
XKEYBOARD="dk"
KDEKEYBOARD="dk"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="dk,de,us,fr"
;;
es)
# Spanish version
COUNTRY="es"
LANG="es_ES@euro"
KEYTABLE="es"
XKEYBOARD="es"
KDEKEYBOARD="es"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="de,us,fr"
;;
fi)
# finnish version, though we may not have the kde-i18n files
COUNTRY="fi"
LANG="fi_FI@euro"
KEYTABLE="fi"
XKEYBOARD="fi"
KDEKEYBOARD="fi"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="us"
;;
fr)
# french version
COUNTRY="fr"
LANG="fr_FR@euro"
KEYTABLE="fr"
XKEYBOARD="fr"
KDEKEYBOARD="fr"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="de,us"
;;
he|il)
# Hebrew version
LANGUAGE="he"
COUNTRY="il"
LANG="he_IL"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="il"
CHARSET="iso8859-8"
# Additional KDE Keyboards
KDEKEYBOARDS="us,fr,de"
;;
it)
# italian version
COUNTRY="it"
LANG="it_IT@euro"
KEYTABLE="it"
XKEYBOARD="it"
KDEKEYBOARD="it"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="fr,us,de"
;;
ja)
# (limited) japanese version
COUNTRY="jp"
LANG="ja_JP"
LANGUAGE="ja"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="us"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="fr,us,de"
;;
nl)
# netherland version
COUNTRY="nl"
LANG="nl_NL@euro"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="en_US"
CHARSET="iso8859-15"
# Additional KDE Keyboards
KDEKEYBOARDS="nl,de,fr"
;;
pl)
# Polish version
COUNTRY="pl"
LANG="pl_PL"
KEYTABLE="pl"
XKEYBOARD="pl"
KDEKEYBOARD="pl"
CHARSET="iso8859-2"
# Additional KDE Keyboards
KDEKEYBOARDS="de,us,fr"
;;
ru)
# Russian version
COUNTRY="ru"
LANG="ru_RU.KOI8-R"
KEYTABLE="ru"
XKEYBOARD="ru"
KDEKEYBOARD="ru"
CHARSET="koi8-r"
CONSOLEFONT="Cyr_a8x16"
# Additional KDE Keyboards
KDEKEYBOARDS="de,us,fr"
;;
sk)
# Slovak version (guessed)
COUNTRY="sk"
LANG="sk"
KEYTABLE="sk-qwerty"
XKEYBOARD="sk"
KDEKEYBOARD="sk"
CHARSET="iso8859-2"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
# Slovenian keyboard
sl)
LANGUAGE="sl"
COUNTRY="si"
LANG="sl_SI"
KEYTABLE="slovene"
XKEYBOARD="sl"
KDEKEYBOARD="si"
CHARSET="iso8859-2"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
tr)
# Turkish version (guessed)
COUNTRY="tr"
LANG="tr_TR"
KEYTABLE="tr_q-latin5"
XKEYBOARD="tr"
KDEKEYBOARD="tr"
CHARSET="iso8859-9"
# Additional KDE Keyboards
KDEKEYBOARDS="us,de,fr"
;;
tw)
# Traditional chinese version (thanks to Chung-Yen Chang)
COUNTRY="tw"
LANG="zh_TW.Big5"
LANGUAGE="zh_TW.Big5"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="us"
# CHARSET="big5-0"
CHARSET="iso8859-1"
# Additional KDE Keyboards
KDEKEYBOARDS="us"
XMODIFIERS="@im=xcin"
;;
uk)
# british version
COUNTRY="uk"
LANG="en_GB"
KEYTABLE="uk"
XKEYBOARD="uk"
KDEKEYBOARD="gb"
CHARSET="iso8859-1"
# Additional KDE Keyboards
KDEKEYBOARDS="us"
;;
*)
# US version
LANGUAGE="us"
COUNTRY="us"
LANG="C"
KEYTABLE="us"
XKEYBOARD="us"
KDEKEYBOARD="us"
CHARSET="iso8859-1"
# Additional KDE Keyboards
KDEKEYBOARDS="de,fr"
;;
esac

# Export it now, so error messages get translated, too
export LANG COUNTRY CHARSET

# Allow keyboard override by boot commandline
KKEYBOARD="$(getbootparam keyboard 2>/dev/null)"
[ -n "$KKEYBOARD" ] && KEYTABLE="$KKEYBOARD"
KXKEYBOARD="$(getbootparam xkeyboard 2>/dev/null)"

if [ -n "$KXKEYBOARD" ]; then
  XKEYBOARD="$KXKEYBOARD"
  KDEKEYBOARD="$KXKEYBOARD"
elif [ -n "$KKEYBOARD" ]; then
  XKEYBOARD="$KKEYBOARD"
  KDEKEYBOARD="$KKEYBOARD"
fi

# Also read desired desktop, override for MythTV (and setup)
stringinstring "mythtv " "$CMDLINE" >/dev/null 2>&1 && MYTHTV=mythtv

DESKTOP="$(getbootparam desktop 2>/dev/null)"
[ -z "$DESKTOP" ] && DESKTOP=kde

if [ -n "$MYTHTV" ]; then
  modprobe ivtv > /dev/null 2>&1

  if grep -qv lirc $SYSERVICES; then echo "lirc" >> $SYSERVICES; fi
  if grep -qv mysql $SYSERVICES; then echo "mysql" >> $SYSERVICES; fi
  if grep -qv mythtv $SYSERVICES; then echo "mythtv" >> $SYSERVICES; fi

  [ "$RUNLEVEL" = "N 4" ] && echo $MYTHTV > /home/guest/.wmrc

  cp -p /vortex/etc/sysconfig/mythtv /etc/sysconfig
  mount -Lmythtv -text3 /mnt/store 2>/dev/null

  #DESKTOP=<TBD custom WM config>
  DESKTOP=fvwm
fi

case "$DESKTOP" in
  fvwm|icewm|mwm|twm)
    [ `type -p $DESKTOP` ] || DESKTOP=default
    ;;
  kde)
    [ $MEMORY -gt 64 ] || DESKTOP=default
    ;;
esac
echo "DESKTOP=\"$DESKTOP\"" >> /etc/sysconfig/desktop

# Check if we are running from the CD-ROM or HD
[ -f /etc/sysconfig/boot ] && . /etc/sysconfig/boot

# Set clock (Local time is more often used than GMT, so it is default)
checkbootparam utc >/dev/null 2>&1 && UTC="-u"
checkbootparam gmt >/dev/null 2>&1 && UTC="-u"

hwclock $UTC -s

if [ -n "$INSTALLED" ]; then
  echo "Running from HD, checking filesystems..."
  # We are running from HD, so a file system check is recommended
  [ -f /etc/init.d/checkroot.sh ] && /etc/init.d/checkroot.sh
  [ -f /etc/init.d/checkfs.sh ]   && /etc/init.d/checkfs.sh
fi

# / must be read-write in any case, starting from here
mount -o remount,rw / 2>/dev/null

if [ -n "$INSTALLED" ]; then
  echo -n "Running from HD, regenerate ld.so.cache and modules.dep..."
  # Regenerate ld.so.cache and module dependencies on HD
  ldconfig ; depmod -a 2>/dev/null
  echo " Done."
fi

# Delete obsolete links and files before starting autoconfig
if ! checkbootparam "nohwsetup"; then
  rm -f /dev/cdrom* /dev/cdwriter* /dev/dvd* \
       /dev/mouse* /dev/modem* /dev/scanner* \
      /etc/sysconfig/i18n /etc/sysconfig/keyboard \
      2>/dev/null
fi

# Write /etc/sysconfig/ files for other scripts to parse
# Standard variables/files
echo "LANG=\"$LANG\""                  > /etc/sysconfig/i18n
echo "COUNTRY=\"$COUNTRY\""           >> /etc/sysconfig/i18n
echo "LANGUAGE=\"$LANGUAGE\""         >> /etc/sysconfig/i18n
echo "CHARSET=\"$CHARSET\""           >> /etc/sysconfig/i18n
echo "XMODIFIERS=\"$XMODIFIERS\""     >> /etc/sysconfig/i18n

# Default Keyboard layout for console and X
echo "KEYTABLE=\"$KEYTABLE\""          > /etc/sysconfig/keyboard
echo "XKEYBOARD=\"$XKEYBOARD\""       >> /etc/sysconfig/keyboard
echo "KDEKEYBOARD=\"$KDEKEYBOARD\""   >> /etc/sysconfig/keyboard
echo "KDEKEYBOARDS=\"$KDEKEYBOARDS\"" >> /etc/sysconfig/keyboard

# No kernel messages while probing modules
echo "0" > /proc/sys/kernel/printk

# Bring up loopback interface now
ifconfig lo 127.0.0.1 up

HOSTNAME=linux
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network
hostname $HOSTNAME

# Print CPU info
awk -F: '/^processor/{printf "Processor"$2" is "};/^model name/{printf $2};/^vendor_id/{printf vendor};/^cpu MHz/{printf " %dMHz",int($2)};/^cache size/{printf ","$2" Cache"};/^$/{print ""}' /proc/cpuinfo 2>/dev/null

if checkbootparam "noapm"; then
  echo " Skipping APM Bios detection as requested on boot commandline."
else
  modprobe apm power_off=1 > /dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo " APM Bios found, power management functions enabled."
  fi
fi

# PCMCIA Check/Setup
# This needs to be done before other modules are being loaded by hwsetup
echo "PCMCIA=no" > /etc/sysconfig/pcmcia

if checkbootparam "nopcmcia"; then
  echo " Skipping PCMCIA detection as requested on boot commandline."
elif modprobe pcmcia_core >/dev/null 2>&1; then
  #PCIC="yenta_socket i82365 tcic"
  PCIC=yenta_socket

  if modprobe $PCIC >/dev/null 2>&1; then
    if modprobe ds >/dev/null 2>&1; then
      if grep -q pcmcia /proc/devices; then
        if cardmgr 2>/dev/null; then
          touch /var/lock/subsys/pcmcia
          echo "PCMCIA=yes" > /etc/sysconfig/pcmcia
          echo "PCIC=$PCIC" >>/etc/sysconfig/pcmcia
          PCMCIA=yes
        fi
      fi
      [ -z "$PCMCIA" ] && rmmod ds 2>/dev/null
    fi
    [ -z "$PCMCIA" ] && rmmod $PCIC 2>/dev/null
  fi
  [ -z "$PCMCIA" ] && rmmod pcmcia_core 2>/dev/null
fi

# USB enable
if checkbootparam "nousb"; then
  echo " Skipping USB detection as requested on boot commandline."
else
  # We now try to load USB Host Controller Driver(s)
  FOUNDUSB=""
  for u in ehci-hcd ohci-hcd uhci-hcd; do modprobe "$u" >/dev/null 2>&1 && FOUNDUSB="yes"; done
  if [ -n "$FOUNDUSB" ]; then
    echo " USB found, managed by ${WHITE}hotplug${NORMAL}."
    [ -x /etc/hotplug/usb.rc ] && /etc/hotplug/usb.rc start >/dev/null 2>&1
  fi
fi

# Firewire enable
if checkbootparam "nofirewire"; then
  echo " Skipping Firewire detection as requested on boot commandline."
else
  # We now try to load the firewire module
  FOUNDFIREWIRE=""
  modprobe ohci1394 >/dev/null 2>&1 && FOUNDFIREWIRE="yes"
  if [ -n "$FOUNDFIREWIRE" ]; then
    echo " Firewire found, managed by ${WHITE}hotplug${NORMAL}."
  fi
fi

# Search & configure supported hardware
if ! checkbootparam "nohwsetup"; then
  if hwsetup -p >/dev/null; then
    echo -n "${NORMAL}"
  else
    echo " ${RED}Please check.${NORMAL}"
  fi
fi

# SCSI Host Adapter
[ -f /etc/sysconfig/scsi ] && . /etc/sysconfig/scsi
if [ -n "$FULLNAME" -o -n "$DRIVER" ]; then
  echo -n " SCSI Host Adapter:"
  [ -n "$FULLNAME" ] && echo -n " ${WHITE}$FULLNAME${NORMAL}"
  [ -n "$DRIVER" ] && echo -n " driver=${WHITE}$DRIVER"
  echo "${NORMAL}"
  FULLNAME=""
  DEVICE=""
  DRIVER=""
fi

# Mouse
[ -f /etc/sysconfig/mouse ] && . /etc/sysconfig/mouse
if [ -n "$DEVICE" ]; then
  echo " Mouse is ${WHITE}${FULLNAME}${NORMAL} at ${WHITE}${DEVICE}${NORMAL}"
  FULLNAME=""
  DEVICE=""
  DRIVER=""
fi

# Soundcard
SOUNDCONF=/etc/sysconfig/sound
[ -f $SOUNDCONF ] && . $SOUNDCONF

if [ -n "$FULLNAME" -o -n "$DRIVER" ]; then
  echo -n " Soundcard:"
  [ -n "$FULLNAME" ] && echo -n " ${WHITE}$FULLNAME${NORMAL}"

  if [ -n "$DRIVER" ]; then
    echo -n " driver=${WHITE}$DRIVER"
    [ "$DRIVER" != "unknown" ] && echo "INIT=\"aumix -v90 -w90 -c90\"" >> $SOUNDCONF
  fi
  echo "${NORMAL}"
fi

# Check for network settings passed as boot parameters
ipaddr="$(getbootparam ipaddr 2>/dev/null)"
netmask="$(getbootparam netmask 2>/dev/null)"
gateway="$(getbootparam gateway 2>/dev/null)"
nameserver="$(getbootparam nameserver 2>/dev/null)"

essid="$(getbootparam essid 2>/dev/null)"
key="$(getbootparam key 2>/dev/null)"

# Quick and dirty generation of wireless interface configuration file
count=`wc -l /proc/net/wireless | awk '{print $1}'`

if [ $count -gt 2 ]; then
  name=`tail -1 /proc/net/wireless | cut -d: -f1 | sed s'/ //g'`
  echo " Wireless Network device ${WHITE}$name${NORMAL} detected."

  confile="/etc/sysconfig/interface/$name"
  echo "# wireless interface" > $confile

  if [ -n "$ipaddr" ]; then
    echo "PROTOCOL=\"static\"" >> $confile
    echo "IPADDR=\"$ipaddr\"" >> $confile
  else
    echo "PROTOCOL=\"dynamic\"" >> $confile
  fi

  if [ -n "$netmask" ]; then
    echo "NETMASK=\"$netmask\"" >> $confile
  fi
  if [ -n "$gateway" ]; then
    echo "GATEWAY=\"$gateway\"" >> $confile
  fi
  if [ -n "$nameserver" ]; then
    echo "NAMESERVER=\"$nameserver\"" >> $confile
  fi

  if [ -n "$essid" ]; then
    echo "ESSID=\"$essid\"" >> $confile
  fi
  if [ -n "$key" ]; then
    echo "KEY=\"$key\"" >> $confile
  fi
fi

# Network device(s): DHCP Broadcast for IP address
if checkbootparam "nodhcp"; then
  echo " Skipping DHCP broadcast/network detection as requested on boot commandline."
else
  NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
  for DEVICE in $NETDEVICES
  do
    if [ "$DEVICE" = "eth0" -a -n "$ipaddr" -a -z "$confile" ]; then
      echo -n " Network device ${WHITE}$DEVICE${NORMAL} detected, static IP $ipaddr"
      confile="/etc/sysconfig/interface/$DEVICE"

      echo "PROTOCOL=\"static\"" >> $confile
      echo "IPADDR=\"$ipaddr\"" >> $confile

      if [ -n "$netmask" ]; then
        echo "NETMASK=\"$netmask\"" >> $confile
      fi
      if [ -n "$gateway" ]; then
        echo "GATEWAY=\"$gateway\"" >> $confile
      fi
      if [ -n "$nameserver" ]; then
        echo "NAMESERVER=\"$nameserver\"" >> $confile
      fi
    else
      echo -n " Network device ${WHITE}$DEVICE${NORMAL} detected, DHCP broadcasting for IP."
      trap 2 3 11
      pump -i $DEVICE >/dev/null 2>&1 &
      trap "" 2 3 11
      sleep 1
      echo " ${CYAN}(Backgrounding)${NORMAL}"
    fi
  done
fi

# Read default keyboard from config file.
# There seems to be no reliable autoprobe possible.
[ -f /etc/sysconfig/keyboard ] && . /etc/sysconfig/keyboard
[ -n "$KEYTABLE" ] && loadkeys -q $KEYTABLE

[ -f /etc/sysconfig/i18n ] && . /etc/sysconfig/i18n
[ -n "$SYSFONT" -a -n "$CHARMAP" ] && setfont $SYSFONT -m $CHARMAP

# Check for blind option or brltty
checkbootparam "blind" && BLIND="yes"
BRLTTY="$(getbootparam brltty 2>/dev/null)"

if [ -n "$BLIND" -o -n "$BRLTTY" ]; then
  if [ -x /sbin/brltty ]; then
    # Blind option detected, start brltty now.
    CMD=brltty
    BRLTYPE=""
    BRLDEV=""
    BRLTEXT=""

    if [ -n "$BRLTTY" ]; then
      # Extra options
      BRLTYPE="${BRLTTY%%,*}"
      R="${BRLTTY#*,}"

      if [ -n "$R" -a "$R" != "$BRLTTY" ]; then
        BRLTTY="$R"
        BRLDEV="${BRLTTY%%,*}"
        R="${BRLTTY#*,}"
        if [ -n "$R" -a "$R" != "$BRLTTY" ]; then
          BRLTTY="$R"
          BRLTEXT="${BRLTTY%%,*}"
          R="${BRLTTY#*,}"
        fi
      fi
    fi
    [ -n "$BRLTYPE" ] && CMD="$CMD -b $BRLTYPE"
    [ -n "$BRLDEV" ] && CMD="$CMD -d $BRLDEV"
    [ -n "$BRLTEXT" ] && CMD="$CMD -t $BRLTEXT"
    echo " Starting braille-display manager: ${WHITE}${CMD}${NORMAL}."
    ( exec $CMD & )
    sleep 2
  fi
fi

if checkbootparam noagp; then
  echo " Skipping AGP detection as requested on boot commandline."
else
  # Probe for AGP. Hope this can fail safely
  stringinfile "AGP" "/proc/pci" 2>/dev/null && modprobe agpgart agp_try_unsupported=1 >/dev/null 2>&1 && echo " ${WHITE}AGP bridge${NORMAL} detected."
fi

##
# XFree86 setup using /etc/X11/XF86Config.m4 template
[ -f $XSYSCONFIG ] && . $XSYSCONFIG

if [ -e /etc/X11/XF86Config.m4 -a ! -e /etc/X11/XF86Config ]; then
  XDRIVER="$(getbootparam xdriver 2>/dev/null)"

  if [ -n "$XDRIVER" ]; then
    echo "# autoconfig - specified as boot parameter" >> $XSYSCONFIG
    echo "XMODULE=\"$XDRIVER\"" >> $XSYSCONFIG
    XMODULE=$XDRIVER
  fi

  VIRTUAL='#Virtual 0 0'
  XMODES='"1280x1024" "1024x768" "800x600" "640x480"'
  XRES="$(getbootparam xres 2>/dev/null)"

  if [ -n "$XRES" ]; then
    VIRTUAL="Virtual `echo $XRES | sed -e 's,x, ,'`"
    XMODES="\"$XRES\""
  fi

  # Generate /etc/X11/XF86Config from XF86Config.m4 template and boot params
  m4 -DXDRIVER=$XMODULE -DXMODES="$XMODES" -DVIRTUAL="$VIRTUAL" /etc/X11/XF86Config.m4 > /etc/X11/XF86Config
fi

# Append to $XSYSCONFIG custom features from boot params 
[ -n "$XSTART" ] && echo "XSTART=\"$XSTART\"" >> $XSYSCONFIG
[ -n "$XINIT"  ] && echo "XINIT=\"$XINIT\""   >> $XSYSCONFIG
[ -n "$XRESET" ] && echo "XRESET=\"$XRESET\"" >> $XSYSCONFIG

##
# Collect partitions from /proc/partitions first for enabling DMA
checkbootparam "dma" && DMA="yes"
checkbootparam "noswap" && NOSWAP="yes"

for d in `ls -1d /proc/ide/hd? 2>/dev/null`; do
  IDEDISKS="$IDEDISKS ${d##*/}"
done
while read major minor blocks partition relax; do
  partition="${partition##*/}"
  [ -z "$partition" -o ! -e "/dev/$partition" ] && continue
  case "$partition" in
    hd?)	# IDE entire disk
      ;;
    sd?)	# SCSI entire disk
      ;;
    [hs]d*)	# IDE or SCSI partition
      partitions="$partitions /dev/$partition"
      ;;
  esac
done <<EOT
$(awk 'BEGIN{old="__start"}{if($0==old){exit}else{old=$0;if($4&&$4!="name"){print $0}}}' /proc/partitions)
EOT

# Enable DMA for all IDE drives now if requested.
if [ -n "$DMA" ]; then
  for d in $IDEDISKS; do
    MODEL="$(cat /proc/ide/$d/model 2>/dev/null)"
    if [ "$?" = "0" ]; then
      echo "Enabling DMA acceleration for: ${WHITE}$d ${MODEL:+[$MODEL]}${NORMAL}"
      hdparm -qd1 "/dev/$d" 2>/dev/null
    fi
  done
fi

# Activate swap using an applicable partition (or file)
if [ -n "$partitions" ]; then
  rm -f /etc/sysconfig/partitions

  for part in $partitions; do
    FILE="$(LANG=C LC_ALL=C LC_MESSAGES=C file -s $part)"
    echo "$FILE" >> /etc/sysconfig/partitions

    case "$FILE" in
      *[Ss][Ww][Aa][Pp]*)
        if [ -n "$NOSWAP" ]; then
          echo "Ignoring swap partition ${WHITE}$part${NORMAL} as requested."
        else
          echo "Activating swap partition ${WHITE}$part${NORMAL}"
          swapon $part 2>/dev/null
        fi
        #break 2
        ;;

      *NTFS*|*FAT*|*ext*)
        name=`echo $part | sed -e 's,/dev/,,'`
        (cd /mnt ; ln -s auto/$name $name)
        ;;
    esac
  done
fi

# configure firewall 
FIREWALL="$(getbootparam firewall 2>/dev/null)"
[ -n "$FIREWALL" ] && echo "FIREWALL=\"$FIREWALL\"" >> /etc/sysconfig/network

# check seeding /var/db
if grep -q mysql $SYSERVICES; then cp -a /vortex/var/db/mysql /var/db; fi
if grep -q postgres $SYSERVICES; then cp -a /vortex/var/db/postgres /var/db; fi

# Re-enable signals
echo "6" > /proc/sys/kernel/printk
trap 2 3 11

exit 0
